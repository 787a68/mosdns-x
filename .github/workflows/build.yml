name: Build and Push on Upstream Release

on:
  # 1. 每天凌晨3点定时运行，检查更新
  schedule:
    - cron: '0 3 * * *'
  
  # 2. 允许手动触发，方便调试
  workflow_dispatch:

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest upstream release version
        id: get_version
        run: |
          # 通过 GitHub API 获取 pmkol/mosdns-x 的最新 release 版本号
          # 使用 jq 工具解析 JSON 并提取 tag_name
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/pmkol/mosdns-x/releases/latest" | jq -r .tag_name)
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to fetch latest version."
            exit 1
          fi
          echo "Latest upstream version is: $LATEST_VERSION"
          # 将版本号设置为 job 的输出，供后续步骤使用
          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Check if image tag already exists
        id: check_image
        # 我们假设你的镜像仓库是 ghcr.io (GitHub Container Registry)
        # 格式为 ghcr.io/YOUR_GITHUB_USERNAME/YOUR_IMAGE_NAME
        # 请根据你的实际情况修改下面的镜像名称
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/mosdns-x"
          TAG="${{ steps.get_version.outputs.version }}"
          
          echo "Checking for image: ${IMAGE_NAME}:${TAG}"
          
          # 使用 skopeo 工具检查远程镜像是否存在，如果不存在则继续
          # skopeo copy 返回 0 表示成功（镜像存在），返回 1 表示失败（镜像不存在）
          if skopeo copy "docker://${IMAGE_NAME}:${TAG}" "dir:/tmp/test" &>/dev/null; then
            echo "Image tag ${TAG} already exists. No new build needed."
            echo "build_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Image tag ${TAG} does not exist. Starting build process."
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi
        
      - name: Set up QEMU
        if: steps.check_image.outputs.build_needed == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.build_needed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.check_image.outputs.build_needed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_image.outputs.build_needed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # 使用上游版本号作为构建参数
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}
          # 同时使用上游版本号和 'latest' 作为镜像标签
          tags: |
            ghcr.io/${{ github.repository_owner }}/mosdns-x:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/mosdns-x:latest